// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: palindrom.proto

package palindrom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Palindrome service

type PalindromeService interface {
	FindPalindrome(ctx context.Context, in *PalindromeRequest, opts ...client.CallOption) (*PalindromeResponse, error)
}

type palindromeService struct {
	c    client.Client
	name string
}

func NewPalindromeService(name string, c client.Client) PalindromeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "palindrome"
	}
	return &palindromeService{
		c:    c,
		name: name,
	}
}

func (c *palindromeService) FindPalindrome(ctx context.Context, in *PalindromeRequest, opts ...client.CallOption) (*PalindromeResponse, error) {
	req := c.c.NewRequest(c.name, "Palindrome.findPalindrome", in)
	out := new(PalindromeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Palindrome service

type PalindromeHandler interface {
	FindPalindrome(context.Context, *PalindromeRequest, *PalindromeResponse) error
}

func RegisterPalindromeHandler(s server.Server, hdlr PalindromeHandler, opts ...server.HandlerOption) error {
	type palindrome interface {
		FindPalindrome(ctx context.Context, in *PalindromeRequest, out *PalindromeResponse) error
	}
	type Palindrome struct {
		palindrome
	}
	h := &palindromeHandler{hdlr}
	return s.Handle(s.NewHandler(&Palindrome{h}, opts...))
}

type palindromeHandler struct {
	PalindromeHandler
}

func (h *palindromeHandler) FindPalindrome(ctx context.Context, in *PalindromeRequest, out *PalindromeResponse) error {
	return h.PalindromeHandler.FindPalindrome(ctx, in, out)
}
